df <- df %>%
mutate(Product = case_when(Product__r.Super_Product_Family__c %in% c("3P Risk Management") ~ "RiskRate",
Product__r.Super_Product_Family__c %in% c("Compliance Training") ~ "NAVEXEngage",
Product__r.Super_Product_Family__c %in% c("Incident Management") ~ "EthicsPoint",
Product__r.Super_Product_Family__c %in% c("Disclosure Management") ~ "Disclosure Manager",
Product__r.Super_Product_Family__c %in% c("Policy Management") ~ "PolicyTech",
TRUE ~ Product__r.Family)) %>%
filter(Product=={{ Product }})
}
df <- df %>%
filter(pse__Status__c == Status) %>%
reframe({{ Status }} := Planned_vs_Client_Billable_no_neg__c[which(pse__Status__c==Status)] %>% sum(na.rm = TRUE)) %>%
reframe(across({{ Status }}, .names = "{.col} Hours"))%>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value") %>%
mutate(Value = Value %>% na_if(NaN),
Product := Product,
Group := Group)
return(df)
}
ps_milestones <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Other Services", "Required Setup"))
product_list <- c("Overall", "EthicsPoint", "PolicyTech", "NAVEXEngage", "RiskRate", "ESG", "Disclosure Manager", "WhistleB", "Other")
ps_backlog_delayed <- product_list %>%
map(~ get_onhold_pipeline_metrics(ps_milestones, Group = "Professional Services", Status = "Delayed On-Hold", Product = .)) %>%
bind_rows()
ps_backlog_pipeline <- product_list %>%
map(~ get_onhold_pipeline_metrics(ps_milestones, Group = "Professional Services", Status = "Pipeline", Product = .)) %>%
bind_rows()
ps_backlog_metrics <- bind_rows(ps_backlog_delayed,
ps_backlog_pipeline)
ps_metrics2 <- milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Professional Services")) %>%
reframe(# `On-Time Completion` = Milestone_On_Time_TD__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
#                                                        Actual_Go_Live__c >= from_date &
#                                                        Actual_Go_Live__c <= to_date)] %>% mean(),
`Time to Implement (Days)` = Calculated_Duration_days__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% mean(),
# pse__Planned_Hours__c = pse__Planned_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
#                                                       pse__Status__c=="Complete" &
#                                                       Actual_Go_Live__c >= from_date &
#                                                       Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE),
# Total_Approved_Hours__c = Total_Approved_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
#                                                           pse__Status__c=="Complete" &
#                                                           Actual_Go_Live__c >= from_date &
#                                                           Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE),
`Delivery Efficiency` = (pse__Planned_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
pse__Status__c=="Complete" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE) /
Total_Approved_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
pse__Status__c=="Complete" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
# PSO Attach Rate (NG Core)
# Professional Services Gross Margin %
output <- bind_rows(output,
ps_metrics,
ps_backlog_metrics,
ps_metrics2)
# Implementation ----
im_metrics <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Other Services", "Required Setup")) %>%
reframe(`New Project Hours Sold` = Total_Planned_Hours__c[which(pse__Project__r.pse__Opportunity__r.CloseDate >= to_date |
(CreatedDate >= to_date & grepl("Course Swap", Name)))] %>% sum(na.rm = TRUE),
`Planned Hours Completed` = (Planned_vs_Billable_Hours_Last_Month__c + Under_Planned_Hours_Last_Month__c)[which(pse__Status__c!="Terminated" &
Planned_vs_Billable_Hours_Last_Month__c > 0 &
Under_Planned_Hours_Last_Month__c > 0 &
Actual_Go_Live__c >= from_date)] %>% sum(na.rm = TRUE),
`Hour Overages` = Planned_vs_Billable_Hours_Last_Month__c[which(pse__Status__c!="Complete" &
Planned_vs_Billable_Hours_Last_Month__c > 0)] %>% sum(na.rm = TRUE),
`Hour Overages for % Complete Milestones` = Planned_vs_Billable_Hours_Last_Month__c[which(pse__Status__c!="Complete" &
Planned_vs_Billable_Hours_Last_Month__c > 0 &
Contains_Percent_Complete_Revenue__c==TRUE)] %>% sum(na.rm = TRUE),
`Backlog Hours` = Planned_vs_Client_Billable_no_neg__c[which(pse__Status__c %in% c("Not Started",
"Active",
"Delayed Active",
"Pending Termination",
"Pipeline",
"Delayed On-Hold"))] %>% sum(na.rm = TRUE)) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
im_milestones <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Other Services", "Required Setup"))
im_backlog_delayed <- product_list %>%
map(~ get_onhold_pipeline_metrics(im_milestones, Group = "Implementation", Status = "Delayed On-Hold", Product = .)) %>%
bind_rows()
im_backlog_pipeline <- product_list %>%
map(~ get_onhold_pipeline_metrics(im_milestones, Group = "Implementation", Status = "Pipeline", Product = .)) %>%
bind_rows()
im_backlog_metrics <- bind_rows(im_backlog_delayed,
im_backlog_pipeline)
im_metrics2 <- milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Other Services", "Required Setup")) %>%
reframe(`On-Time Completion` = Milestone_On_Time_TD__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% mean(),
`Time to Implement (Days)` = Calculated_Duration_days__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% mean(),
`Delivery Efficiency` = (pse__Planned_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
pse__Status__c=="Complete" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE) /
Total_Approved_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
pse__Status__c=="Complete" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
# Implementation Expense, % of One-Time Revenue
output <- bind_rows(output,
im_metrics,
im_backlog_metrics,
im_metrics2)
# Technical Specialists ----
# Tasks Opened
# Tasks Closed
# On-Time Completion
# Average Days to Complete
# Data Services - Telecom ----
# Tasks Opened
# Tasks Closed
# On-Time Completion
# Average Days to Complete
# Tasks Opened
# Tasks Closed
# On-Time Completion
# Average Days to Complete
# Cases Opened
# Cases Closed
# Backlog (48 hour)
# Backlog (10 day)
# Backlog (30 day)
# Initial Response Time (Hours)
# Average Time to Resolution (Hours)
# Customer Support Expense, % of Revenue
# Net Retention Rate %
# Bookings Expansion %
# Cross-Sell %
# Upsell %
# Churn %
# Sweep %
# CSM Customer Count
# CSM ARR $
# Customer Success Expense, % of Revenue
# Services Overall
# Professional Services
# Implementation
# Web Services
# Technical Specialist
# Telecom
# Customer Support
# Customer Support (Productive)
# ROI on Deflected Cases
# of How-To Cases Opened
# % of How-To Cases Opened
# Case Deflection %
# NGC Case Submission Page Views
# Support Cases via NGC
# % Support Cases via NGC
# NGC User Sessions
View(im_metrics2)
im_metrics2 <- milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Other Services", "Required Setup"),
pse__Project__r.pse__Project_Status__c!="Terminated",
Actual_Go_Live__c >= from_date,
Actual_Go_Live__c <= to_date) %>%
reframe(`On-Time Completion` = Milestone_On_Time_TD__c %>% mean(),
`Time to Implement (Days)` = Calculated_Duration_days__c %>% mean(),
`Delivery Efficiency` = (pse__Planned_Hours__c[which(pse__Status__c=="Complete")] %>% sum(na.rm= TRUE) /
Total_Approved_Hours__c[which(pse__Status__c=="Complete")] %>% sum(na.rm= TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
milestones
product_families_include
milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Other Services", "Required Setup"),
pse__Project__r.pse__Project_Status__c!="Terminated")
im_metrics2 <- milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Implementation"),
pse__Project__r.pse__Project_Status__c!="Terminated",
Actual_Go_Live__c >= from_date,
Actual_Go_Live__c <= to_date) %>%
reframe(`On-Time Completion` = Milestone_On_Time_TD__c %>% mean(),
`Time to Implement (Days)` = Calculated_Duration_days__c %>% mean(),
`Delivery Efficiency` = (pse__Planned_Hours__c[which(pse__Status__c=="Complete")] %>% sum(na.rm= TRUE) /
Total_Approved_Hours__c[which(pse__Status__c=="Complete")] %>% sum(na.rm= TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
# At Risk Customers ----
at_risk_issue_statuses <- c("Unresolved",
"Open - Unresolved",
"Open - NPS")
at_risk_customers <- issues %>%
filter(Issue_Type__c %in% c("Yellow", "Red"),
!grepl("(?i)Lockpath|IRM|NetClaim", Product_Family__c)) %>%
reframe(`ARR at Risk (Red and Yellow)` = AccountName__r.Total_Asset_ARR__c[which(Status__c %in% at_risk_issue_statuses)] %>% sum(na.rm = TRUE),
`ARR at Risk Red` = AccountName__r.Total_Asset_ARR__c[which(Issue_Type__c=="Red" &
Status__c %in% at_risk_issue_statuses)] %>% sum(na.rm = TRUE),
`ARR At Risk Yellow` = AccountName__r.Total_Asset_ARR__c[which(Issue_Type__c=="Yellow" &
Status__c %in% at_risk_issue_statuses)] %>% sum(na.rm = TRUE),
`Customers at Risk (Red)` = AccountName__c[which(Issue_Type__c=="Red" &
Status__c %in% at_risk_issue_statuses)] %>% n_distinct(),
`Customers at Risk (Yellow)` = AccountName__c[which(Issue_Type__c=="Yellow" &
Status__c %in% at_risk_issue_statuses)] %>% n_distinct(),
`Issues Opened` = Id[which(Date_Reported__c >= ymd(from_date))] %>% n_distinct(),
`Issues Closed` = Id[which(Date_Closed__c >= ymd(from_date) &
Status__c %in% c("Resolved",
"Closed - Resolved",
"Closed - Unresolved",
"Closed - NPS",
"Closed - Unresponsive NPS"))] %>% n_distinct()
) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
output <- at_risk_customers
# Qualified Leads Booked ----
opportunities <- opportunities %>%
distinct(across(-starts_with("OpportunityLineItem.")))
qualified_leads_booked <- opportunities %>%
filter(StageName %in% c("Closed Won", "Booked"),
CloseDate >= from_date,
CloseDate <= to_date) %>%
mutate(across(c(Amount), ~ . / Currency_Conversion_Rate_at_Close__c)) %>%
reframe(`Professional Services` = Amount[which(Services_Referred_by_Users__r.Group__c=="Professional Services")] %>% sum(na.rm = TRUE),
`Implementation` = Amount[which(Services_Referred_by_Users__r.Group__c=="Implementation")] %>% sum(na.rm = TRUE),
`Customer Support` = Amount[which(Services_Referred_by_Users__r.Group__c=="Customer Support")] %>% sum(na.rm = TRUE),
`Customer Success Managers` = Amount[which(Services_Referred_by_Users__r.Group__c=="Customer Success Managers")] %>% sum(na.rm = TRUE)) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
output <- bind_rows(output,
qualified_leads_booked)
# Customer Satisfaction ----
csat <- surveys %>%
mutate(`AE Segment` = case_when(Account__r.Owner.Sales_Rep_Role__c %in% c("AE1-EAPJ", "AE1-F") ~ "AE1",
Account__r.Owner.Sales_Rep_Role__c %in% c("AE2-EAPJ", "AE2-F") ~ "AE2",
Account__r.Owner.Sales_Rep_Role__c %in% c("AE3-EAPJ", "AE3-F") ~ "AE3",
Account__r.Owner.Sales_Rep_Role__c %in% c("AE1-H", "AE2-H", "AE3-H") ~ "Hunter",
TRUE ~ ""))
create_customer_satisfaction_output <- function(df, Segment = "Overall") {
if (Segment != "Overall") {
df <- df %>%
filter(`AE Segment` == Segment)
}
df <- df %>%
reframe(`Professional Services CSAT` = PS_Comp_q3__c[which(!is.na(PS_Comp_q3__c) & Delivery_Survey_Type__c=="Professional Services Completion")] %>% mean(),
`Implementation CSAT` = Imp_Comp_q3__c[which(!is.na(Imp_Comp_q3__c) & Delivery_Survey_Type__c=="Implementation Completion")] %>% mean(),
`Customer Support CSAT` = Q1_Technician_Assist__c[which(!is.na(Q1_Technician_Assist__c) & RecordType.Name=="Client Support")] %>% mean(),
`Product Satisfaction Score` = Q4_Product_Satisfaction__c[which(!is.na(Q4_Product_Satisfaction__c) & RecordType.Name=="Client Support")] %>% mean()) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value") %>%
mutate(Value = Value %>% na_if(NaN),
Segment := Segment)
return(df)
}
nps <- nps_surveys %>%
reframe(Metric = "NPS Score",
Value = NPS_Score__c %>% mean(),
Segment = "Overall")
customer_satisfaction <- bind_rows(csat %>% create_customer_satisfaction_output(),
csat %>% create_customer_satisfaction_output(Segment = "AE1"),
csat %>% create_customer_satisfaction_output(Segment = "AE1"),
csat %>% create_customer_satisfaction_output(Segment = "AE3"),
csat %>% create_customer_satisfaction_output(Segment = "Hunter")) %>%
arrange(desc(Metric)) %>%
bind_rows(nps)
output <- bind_rows(output,
customer_satisfaction)
# Professional Services ----
product_families_include <- c(
"AlertLine",
"Disclosure Management",
"EP Hotline",
"EP Incident Management",
"ESG",
"GRC Insights",
"IntegriLink",
"Lockpath",
"NG Compliance Training",
"NG Gateway",
"NG Policy Management",
"RiskRate",
"Suite Compliance Training",
"Suite Hotline",
"Suite Incident Management",
"Suite Policy Management",
"Suite Survey",
"Telephony",
"WhistleB")
ps_metrics <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Professional Services")) %>%
reframe(`New Project Hours Sold` = Total_Planned_Hours__c[which(pse__Project__r.pse__Opportunity__r.CloseDate >= to_date |
(CreatedDate >= to_date & grepl("Course Swap", Name)))] %>% sum(na.rm = TRUE),
`Planned Hours Completed` = (Planned_vs_Billable_Hours_Last_Month__c + Under_Planned_Hours_Last_Month__c)[which(pse__Status__c!="Terminated" &
Planned_vs_Billable_Hours_Last_Month__c > 0 &
Under_Planned_Hours_Last_Month__c > 0 &
Actual_Go_Live__c >= from_date)] %>% sum(na.rm = TRUE),
`Hour Overages` = Planned_vs_Billable_Hours_Last_Month__c[which(pse__Status__c!="Complete" &
Planned_vs_Billable_Hours_Last_Month__c > 0)] %>% sum(na.rm = TRUE),
`Hour Overages for % Complete Milestones` = Planned_vs_Billable_Hours_Last_Month__c[which(pse__Status__c!="Complete" &
Planned_vs_Billable_Hours_Last_Month__c > 0 &
Contains_Percent_Complete_Revenue__c==TRUE)] %>% sum(na.rm = TRUE),
`Backlog Hours` = Planned_vs_Client_Billable_no_neg__c[which(pse__Status__c %in% c("Not Started",
"Active",
"Delayed Active",
"Pending Termination",
"Pipeline",
"Delayed On-Hold"))] %>% sum(na.rm = TRUE)) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
get_onhold_pipeline_metrics <- function(df, Group, Status, Product="Overall") {
if(Product!="Overall") {
df <- df %>%
mutate(Product = case_when(Product__r.Super_Product_Family__c %in% c("3P Risk Management") ~ "RiskRate",
Product__r.Super_Product_Family__c %in% c("Compliance Training") ~ "NAVEXEngage",
Product__r.Super_Product_Family__c %in% c("Incident Management") ~ "EthicsPoint",
Product__r.Super_Product_Family__c %in% c("Disclosure Management") ~ "Disclosure Manager",
Product__r.Super_Product_Family__c %in% c("Policy Management") ~ "PolicyTech",
TRUE ~ Product__r.Family)) %>%
filter(Product=={{ Product }})
}
df <- df %>%
filter(pse__Status__c == Status) %>%
reframe({{ Status }} := Planned_vs_Client_Billable_no_neg__c[which(pse__Status__c==Status)] %>% sum(na.rm = TRUE)) %>%
reframe(across({{ Status }}, .names = "{.col} Hours"))%>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value") %>%
mutate(Value = Value %>% na_if(NaN),
Product := Product,
Group := Group)
return(df)
}
ps_milestones <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Other Services", "Required Setup"))
product_list <- c("Overall", "EthicsPoint", "PolicyTech", "NAVEXEngage", "RiskRate", "ESG", "Disclosure Manager", "WhistleB", "Other")
ps_backlog_delayed <- product_list %>%
map(~ get_onhold_pipeline_metrics(ps_milestones, Group = "Professional Services", Status = "Delayed On-Hold", Product = .)) %>%
bind_rows()
ps_backlog_pipeline <- product_list %>%
map(~ get_onhold_pipeline_metrics(ps_milestones, Group = "Professional Services", Status = "Pipeline", Product = .)) %>%
bind_rows()
ps_backlog_metrics <- bind_rows(ps_backlog_delayed,
ps_backlog_pipeline)
ps_metrics2 <- milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Professional Services")) %>%
reframe(# `On-Time Completion` = Milestone_On_Time_TD__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
#                                                        Actual_Go_Live__c >= from_date &
#                                                        Actual_Go_Live__c <= to_date)] %>% mean(),
`Time to Implement (Days)` = Calculated_Duration_days__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% mean(),
# pse__Planned_Hours__c = pse__Planned_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
#                                                       pse__Status__c=="Complete" &
#                                                       Actual_Go_Live__c >= from_date &
#                                                       Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE),
# Total_Approved_Hours__c = Total_Approved_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
#                                                           pse__Status__c=="Complete" &
#                                                           Actual_Go_Live__c >= from_date &
#                                                           Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE),
`Delivery Efficiency` = (pse__Planned_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
pse__Status__c=="Complete" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE) /
Total_Approved_Hours__c[which(pse__Project__r.pse__Project_Status__c!="Terminated" &
pse__Status__c=="Complete" &
Actual_Go_Live__c >= from_date &
Actual_Go_Live__c <= to_date)] %>% sum(na.rm= TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
# PSO Attach Rate (NG Core)
# Professional Services Gross Margin %
output <- bind_rows(output,
ps_metrics,
ps_backlog_metrics,
ps_metrics2)
# Implementation ----
im_metrics <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Other Services", "Required Setup")) %>%
reframe(`New Project Hours Sold` = Total_Planned_Hours__c[which(pse__Project__r.pse__Opportunity__r.CloseDate >= to_date |
(CreatedDate >= to_date & grepl("Course Swap", Name)))] %>% sum(na.rm = TRUE),
`Planned Hours Completed` = (Planned_vs_Billable_Hours_Last_Month__c + Under_Planned_Hours_Last_Month__c)[which(pse__Status__c!="Terminated" &
Planned_vs_Billable_Hours_Last_Month__c > 0 &
Under_Planned_Hours_Last_Month__c > 0 &
Actual_Go_Live__c >= from_date)] %>% sum(na.rm = TRUE),
`Hour Overages` = Planned_vs_Billable_Hours_Last_Month__c[which(pse__Status__c!="Complete" &
Planned_vs_Billable_Hours_Last_Month__c > 0)] %>% sum(na.rm = TRUE),
`Hour Overages for % Complete Milestones` = Planned_vs_Billable_Hours_Last_Month__c[which(pse__Status__c!="Complete" &
Planned_vs_Billable_Hours_Last_Month__c > 0 &
Contains_Percent_Complete_Revenue__c==TRUE)] %>% sum(na.rm = TRUE),
`Backlog Hours` = Planned_vs_Client_Billable_no_neg__c[which(pse__Status__c %in% c("Not Started",
"Active",
"Delayed Active",
"Pending Termination",
"Pipeline",
"Delayed On-Hold"))] %>% sum(na.rm = TRUE)) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
im_milestones <- milestones %>%
filter(Product__r.Family %in% product_families_include,
Product__r.GL_Group__c %in% c("Other Services", "Required Setup"))
im_backlog_delayed <- product_list %>%
map(~ get_onhold_pipeline_metrics(im_milestones, Group = "Implementation", Status = "Delayed On-Hold", Product = .)) %>%
bind_rows()
im_backlog_pipeline <- product_list %>%
map(~ get_onhold_pipeline_metrics(im_milestones, Group = "Implementation", Status = "Pipeline", Product = .)) %>%
bind_rows()
im_backlog_metrics <- bind_rows(im_backlog_delayed,
im_backlog_pipeline)
im_metrics2 <- milestones %>%
filter(Product__r.Family %in% product_families_include,
pse__Project__r.pse__Group__r.Name %in% c("Implementation"),
pse__Project__r.pse__Project_Status__c!="Terminated",
Actual_Go_Live__c >= from_date,
Actual_Go_Live__c <= to_date) %>%
reframe(`On-Time Completion` = Milestone_On_Time_TD__c %>% mean(),
`Time to Implement (Days)` = Calculated_Duration_days__c %>% mean(),
`Delivery Efficiency` = (pse__Planned_Hours__c[which(pse__Status__c=="Complete")] %>% sum(na.rm= TRUE) /
Total_Approved_Hours__c[which(pse__Status__c=="Complete")] %>% sum(na.rm= TRUE))) %>%
pivot_longer(cols = everything(),
names_to = "Metric",
values_to = "Value")
# Implementation Expense, % of One-Time Revenue
output <- bind_rows(output,
im_metrics,
im_backlog_metrics,
im_metrics2)
# Technical Specialists ----
# Tasks Opened
# Tasks Closed
# On-Time Completion
# Average Days to Complete
# Data Services - Telecom ----
# Tasks Opened
# Tasks Closed
# On-Time Completion
# Average Days to Complete
# Tasks Opened
# Tasks Closed
# On-Time Completion
# Average Days to Complete
# Cases Opened
# Cases Closed
# Backlog (48 hour)
# Backlog (10 day)
# Backlog (30 day)
# Initial Response Time (Hours)
# Average Time to Resolution (Hours)
# Customer Support Expense, % of Revenue
# Net Retention Rate %
# Bookings Expansion %
# Cross-Sell %
# Upsell %
# Churn %
# Sweep %
# CSM Customer Count
# CSM ARR $
# Customer Success Expense, % of Revenue
# Services Overall
# Professional Services
# Implementation
# Web Services
# Technical Specialist
# Telecom
# Customer Support
# Customer Support (Productive)
# ROI on Deflected Cases
# of How-To Cases Opened
# % of How-To Cases Opened
# Case Deflection %
# NGC Case Submission Page Views
# Support Cases via NGC
# % Support Cases via NGC
# NGC User Sessions
segment_list <- c(NULL, "AE1", "AE2", "AE3", "Hunter")
customer_satisfaction <- segment_list %>%
map(~ create_customer_satisfaction_output(csat, Segment = .)) %>%
bind_rows()
View(customer_satisfaction)
customer_satisfaction <- segment_list %>%
map(~ create_customer_satisfaction_output(csat, Segment = .)) %>%
bind_rows() %>%
arrange(desc(Metric)) %>%
bind_rows(nps)
